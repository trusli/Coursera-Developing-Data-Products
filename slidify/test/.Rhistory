n_new <- 100
n_old <- 100
ave_new <- 4
var_new <- 0.50
ave_old <- 6
var_old <- 2
quantile = 0.975
sd_pool <- sqrt(((n_old -1) * var_old + (n_new - 1) * var_new)/(n_old + n_new -2))
confidenceInterval <- ave_new - ave_old + c(-1,1) * qt(quantile, df=n_new +n_old-2) *sd_pool * (1/n_old +1 /n_new)^0.5
round(confidenceInterval,2)
n_new <- 9
n_new <- 9
n_old <- 9
ave_new <- -3
sd_new <- 1.5
ave_old <- 1
sd_old <- 1.8
quantile = 0.95
sd_pool <- sqrt(((n_old -1) * sd_old^2 + (n_new - 1) * sd_new^2)/(n_old + n_new -2))
confidenceInterval <- ave_new - ave_old + c(-1,1) * qt(quantile, df=n_new +n_old-2) *sd_pool * (1/n_old +1 /n_new)^0.5
round(confidenceInterval,2)
round(confidenceInterval,3)
subject <- c(1,2,3,4,5)
baseline <- c(140,138,150,148,135)
week2 <- c(132,135,151,146,130)
examinatios <- data.frame(subject,baseline,week2)
View(examinatios)
View(examinatios)
test <- t.test (x-examinations$baseline, y=examinations$week2, alt="two.sided", paired = TRUE)
test <- t.test (x=examinations$baseline, y=examinations$week2, alt="two.sided", paired = TRUE)
examinations <- data.frame(subject,baseline,week2)
test <- t.test (x=examinations$baseline, y=examinations$week2, alt="two.sided", paired = TRUE)
test
n <- 9
sd <- 30
mu <- 1100
quantile = 0.975
ci = mu + c(-1,1) * qt(quantile, df=n-1) * sd/sqrt(n)
ci
n <- 4
x <- 3
test <- binom.test (x=x, n=n, alt="greater")
test
round(test$p.value,2)
rate <- 1/100
errors <- 10
days <- 1787
test <- poisson.test(errors, T = days, r = rate, alt"less")
test <- poisson.test(errors, T = days, r = rate, alt="less")
test
n_y <- 9 # subjects treated
n_x <- 9 # placebo
sd_y <- 1.5
sd_x <- 1.8
mu_y <- 3
mu_y <- -3
mu_x <- 1
sd_p <- (((n_x - 1) * σ_x^2 + (n_y - 1) * σ_y^2)/(n_x + n_y - 2))
pval <- pt((μ_y - μ_x) / (σ_p * (1 / n_x + 1 / n_y)^.5), df=n_y + n_x -2)
pval <- pt((mu_y - mu_x) / (sd_p * (1 / n_x + 1 / n_y)^.5), df=n_y + n_x -2)
sd_p <- (((n_x - 1) * σ_x^2 + (n_y - 1) * σ_y^2)/(n_x + n_y - 2))
sd_p <- (((n_x - 1) * sd_x^2 + (n_y - 1) * sd_y^2)/(n_x + n_y - 2))
pval <- pt((mu_y - mu_x) / (sd_p * (1 / n_x + 1 / n_y)^.5), df=n_y + n_x -2)
pval
n <- 100
n <- 100
mu <- 0.01
sd <- 0.04
p <- 0.05
pow <- power.t.test(n=n. delta=mu, sd =sd, sig.level=p, type = "one.sample", alt ="one.sided")
pow <- power.t.test(n=n, delta=mu, sd =sd, sig.level=p, type = "one.sample", alt ="one.sided")
popw
pow
mu <- 0.01
sd <- 0.04
pow <- 0.9
p <- 0.05
n <- power.t.test(power=pow, delta=mu, sd=sd, sig.level=p, type="one.sample", alt="one.sided")
n
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
fit <- lm(y~x)
summary(fit)
data(mtcars)
x <- mtcars$wt
fit <- lm(y~x)
y <- mtcars$mpg
fit <- lm(y~x)
summary(fit)
predict(fit,data.frame(x=mean(x)), interval="confidence")
mean(x)
mean(y)
help(mtcars)
help(mtcars)
View(mtcars)
View(mtcars)
data(mtcars)
predict(fit, data.frame(x=mean(3)),interval="prediction")
predict(fit, data.frame(x=mean(2)),interval="prediction")
fit <- lm (y~ I(x/2))
summary(fit)
predict(fit, data.frame(x=mean(2)),interval="prediction")
fit <- lm (y~ I(x/2))
summary(fit)
predict(fit, data.frame(x=mean(2)),interval="prediction")
tblCoef <- summary(fit)$coefficients
View(tblCoef)
View(tblCoef)
se <- tblCoef[2,1]
df <- fit$df
mean + c(-1,1) *qt(0.975, df=df) * se
mean <- tblCoef [2,2]
mean <- tblCoef [2,2]
mean + c(-1,1) *qt(0.975, df=df) * se
fit <- lm (y~ I(x/2))
summary(fit)
tblCoef <- summary(fit)$coefficients
se <- tblCoef[2,1]
df <- fit$df
mean <- tblCoef[2,2]
# Two sided t-test
mean + c(-1,1) *qt(0.975, df=df) * se
mean + c(-1,1)*qt(0.975, df=df) * se
data(mtcars)
x <- mtcars$wt
y <- mtcars$mpg
fit <- lm (y ~ I(x/2))
summary(fit)
tblCoef <- summary(fit)$coefficients
se <- tblCoef[2,1]
df <- fit$df
mean <- tblCoef[2,2]
# Two sided t-test
mean + c(-1,1)*qt(0.975, df=df) * se
se <- tblCoef[2,2]
df <- fit$df
mean <- tblCoef[2,1]
# Two sided t-test
mean + c(-1,1)*qt(0.975, df=df) * se
data(mtcars)
x <- mtcars$wt
y <- mtcars$mpg
fit <- lm(y~x)
summary(fit)
summary(fit)$coefficients[2, 1]
fit2 <- lm(y~I(x/100))
summary(fit2)
resFit <- fit$residuals^2
resFit
interceptFit <- lm (mpq ~1, mtcars)
interceptFit <- lm (mpg ~1, mtcars)
interceptFitRes <- interceptFit$residuals^2
interceptFit
interceptFitRes
sum(resFit)/sum(interceptFitRes)
data(mtcars)
attach(mtcars)
fit <- lm(mpg~as.factor(cyl) + wt, data=mtcars)
summary(fit)
fit2 <- lm(mpg~as.factor(cyl), data=mtcars)
summary(fit)$coef[3]
summary(fit2)$coef[3]
fit3 <- lm(mpg~as.factor(cyl)*wt, data-mtcars)
fit3 <- lm(mpg~as.factor(cyl)*wt, data=mtcars)
summary(fit3)
result <- anova(fit, fit3, test="Chi")
result
lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fit5 <- lm(y~x)
lm.influence(fit5)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
dfbetas(fit5)[5, 2]
library(ggplot2)
data(mtcars)
boxplot(mpg ~ am, xlab="Transmission (0 = Automatic, 1 = Manual)", ylab="MPG",
main="Boxplot of MPG vs. Transmission")
dim(mtcars)
summary(mtcars)
boxplot(mpg ~ mtcars$am, xlab="Transmission (0 = Automatic, 1 = Manual)", ylab="MPG",main="Boxplot of MPG vs. Transmission")
boxplot(mpg ~ factor(mtcars$am), xlab="Transmission (0 = Automatic, 1 = Manual)", ylab="MPG",main="Boxplot of MPG vs. Transmission")
attach(mtcars)
boxplot(mpg ~ factor(mtcars$am), xlab="Transmission (0 = Automatic, 1 = Manual)", ylab="MPG",main="Boxplot of MPG vs. Transmission")
tresult <- t.test(mpg~am)
tresult
fit <- lm(mpg ~ ., data = mtcars)
sumary(fit)
summary(fit)
altfit <- step(fit, k=log(nrow(mtcars)))
summary(altfit)
```{r, echo="False"}
altfit <- step(fit, k=log(nrow(mtcars)))
summary(altfit)
```
summary(altfit)
sum((abs(dfbetas(altfi)))>1)
sum((abs(dfbetas(altfit)))>1)
dfbetas(altfit)
plot(altfit)
anova(fit, altfit)
pdflatex -v
install.packages("miktex")
data(mtcars)
attach(mtcars)
summary(mtcars)
boxplot(mpg ~ factor(mtcars$am), xlab="Transmission (0 = Automatic, 1 = Manual)", ylab="MPG",main="Boxplot of MPG vs. Transmission")
```
View(mtcars)
plot(altfit)
library(ggplot2)
data(mtcars)
attach(mtcars)
summary(mtcars)
```
```{r, echo=FALSE}
boxplot(mpg ~ factor(mtcars$am), xlab="Transmission (0 = Automatic, 1 = Manual)", ylab="MPG",main="Boxplot of MPG vs. Transmission")
```
tresult <- t.test(mpg~am)
tresult
fit <- lm(mpg ~ ., data = mtcars)
summary(fit)
altfit <- step(fit, k=log(nrow(mtcars)))
summary(altfit)
anova(fit, altfit)
plot(altfit)
par(cex.lab=1.5)
par(cex.lab=1.5)
par(cex.axis=1.5)
boxplot(mpg ~ factor(mtcars$am), xlab="Transmission (0 = Automatic, 1 = Manual)", ylab="MPG",main="Boxplot of MPG vs. Transmission")
library(mass)
install.packages("mass")
install.packages("MASS")
library(mass)
library(MASS)
dim(shuttle)
head(shuttle)
?shuttle
shuttle$use2 <- as.numeric(shuttle$use == "auto")
fit <- glm(use2 ~ as.factor(wind)-1, data="shuttle", family="binomial")
fit <- glm(use2 ~ as.factor(wind) - 1, data="shuttle", family="binomial")
fit <- glm(use2 ~ as.factor(wind) - 1, data=shuttle, family="binomial")
odds <- exp(summary(fit)$coef)
View(odds)
odds[1]/odds[2]
fit <- glm(use2 ~ as.factor(wind) + factor(magn) - 1, data=shuttle,family="binomial")
summary(fit)
summary(fit)$coef
exp(coef(fit))
odds <- exp(cbind(OddsRatio = coef(fit)))
View(odds)
View(odds)
odds[1]/odds[2]
fit2 <- glm(I(1-use2)~ as.factor(wind)-1, data=shuttle, family="binomial")
summary(fit2)
summary(fit)
libray(InsectSprays)
library(InsectSprays)
install.packages("InsectSprays")
fit <- glm(count ~ spray - 1. data=InsectSprays, family="poisson")
fit <- glm(count ~ spray - 1,data=InsectSprays, family="poisson")
summary(fit)$coef
rate <- exp(coef(fit))
rate[1]/rate[2]
fit <- glm(count ~ as.factor(spray) + offset(log(count+1)),data=InsectSpray, family="poisson")
fit <- glm(count ~ as.factor(spray) + offset(log(count+1)),data=InsectSprays, family="poisson")
fit2 <- glm(count ~ as.factor(spray) + offset(log(10)+log(count+1)), data=InsectSprays, family="poisson")
summary(fit)
summary(fit2)
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
knotPoint <- c(0)
spline <- sapply(knotPoint, function(knot) (x > knot)*(x-knot))
xMatrix <- cbind(1,x,spline)
fit <- lm(y~xMatrix-1)
yhat <- predict(fit)
yhat
slope <- fit$coef[2] + fit#coef[3]
slope <- fit$coef[2] + fit$coef[3]
#1.01
plot(x,y)
lines(x,yhat, col=2)
install.packages("caret")
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
install.packages("CORElearn")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
View(training)
View(training)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
View(training)
View(training)
xnames <- colnames(concrete)[1:8]
+ geom_point() + theme_bw()
featurePlot (x=training[,xnames], y=training$CompressiveStrength))+ geom_point() + theme_bw()
featurePlot (x=training[,xnames], y=training$CompressiveStrength)+ geom_point() + theme_bw()
featurePlot (x=training[,xnames], y=training$CompressiveStrength, plot="pairs")
index <- seq_along(1:nrow(training))
ggplot(data=training, aes(x=index, y=CompressiveStrength)) +geom_point() + theme_bw
ggplot(data=training, aes(x=index, y=CompressiveStrength)) +geom_point() + theme_bw()
library(Hmisc)
summary(training)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
ggplot(training) + theme_bw() + geom_histogram(aes(x = Superplasticizer))
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
ggplot(training) + theme_bw() + geom_histogram(aes(x = Superplasticizer))
sum(training$Superplasticizer == 0) / nrow(training)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
subtrain - training [,substr(names(training),1,3) == 'IL_']
subtrain = training [,substr(names(training),1,3) == 'IL_']
View(subtrain)
View(subtrain)
r = preProcess(subtrain, method="pca", thres =0.8)
rtrain = predict(r,subtrain)
rtrain$diagnosis = training$diagnosis
modelfit = train(rtrain$diagnosis~., method='glm', data = rtrain)
install.packages("e1071")
modelfit = train(rtrain$diagnosis~., method='glm', data = rtrain)
summary(modelfit)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
subtrain = training[,substr(names(training),1,3]) == 'IL_']
subtrain = training[,substr(names(training),1,3) == 'IL_']
subtest = testing [,substr(names(testing),1,3) == 'IL_']
r = preProcess(subtrain, method = "pca", thres = 0.8)
rtrain = predict(r,subtrain)
rtrain$diagnosis = training$diagnosis
modelfit_PCA = train(rtrain$diagnosis ~ ., method ='glm', data = rtrain)
summary(modelfit_PCA)
strain = subtrain
strain$diagnosis = training$diagnosis
modelfit_nopca = train(strain$diagnosis~., method = 'glm', data = strain)
summary(modelfit_nopca)
test_pca = predict(r, subtest)
test_nopca = subtest
test_pca = predict(r,subtest)
test_pca$diagnosis = testing$diagnosis
test_pca_pred = predict(modelfit_PCA, test_pca)
test_nopca_pred = predict(modeflfit_noPCA, test_nopca)
test_nopca_pred = predict(modeflfit_nopca, test_nopca)
test_nopca_pred = predict(modelfit_nopca, test_nopca)
confusionmatrix(test_pca_pred, testing$diagnosis)
confusionMatrix(test_pca_pred, testing$diagnosis)
confusionMatrix(test_nopca_pred, testing$diagnosis)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
library(AppliedPredictiveModeling)
version
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
data <- segmentationOriginal
set.seed(125)
inTrain <- data$Case == "Train"
trainData <- data[inTrain,]
testData <- data[-inTrain,]
cartModel <- train(Class ~ ., data=trainData, method='rpart')
cartModel$finalModel
plot (cartModel$finalModel, uniform = T)
text(cartModel$finalModel, cex=0.8#Question 2
text(cartModel$finalModel, cex=0.8)
text(cartModel$finalModel, cex=0.8)
library(pgmm)
install.packages("pgmm")
library(pgmm)
data(olive)
olive = olive[,-1]
newdata = as.data.frame(t(colMeans(olive)))
View(olive)
View(olive)
dim(olive)
head(olive)
olive <- olive[,-1]
olive
treeModel <- train(Area~.,data=olive,method="rpart2")
treeModel <- train(Area ~ .,data=olive,method="rpart2")
library(pgmm)
data(olive)
olive = olive[,-1]
newdata = as.data.frame(t(colMeans(olive)))
dim(olive)
head(olive)
olive <- olive[,-1]
olive
treeModel <- train(Area ~ .,data=olive,method="rpart2")
olive = olive[,-1]
treeModel <- train(Area ~ .,data=olive,method="rpart2")
olive <- olive[,-1]
treeModel <- train(Area ~ .,data=olive,method="rpart2")
treeModel <- train(Area ~ ., data=olive,method="rpart2")
View(newdata)
View(newdata)
library(pgmm)
data(olive)
olive = olive[,-1]
dim(olive)
head(olive)
olive <- olive[,-1]
treeModel <- train(Area ~ ., data=olive,method="rpart2")
install.packages("devtools")
install.packages('Rtools')
devtools::install_github('rstudio/shinyapps')
install.packages('Rtools')
devtools::install_github('rstudio/shinyapps')
install.packages("devtools")
install.packages('Rtools')
devtools::install_github('rstudio/shinyapps')
shinyapps::setAccountInfo(name='trusli', token='53B34473EF98DB91B4445F133DE393AF', secret='apnP4jETNNaY0Cp+GdWcyfD31iHAhDtCf8HbzUML')
library(shinyapps)
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot(s), slider = x(0, 2, step = 0.1))
manipulate(myPlot(s), x.s = slider(0, 2, step = 0.1))
manipulate(myPlot, s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
shinyUI(pageWithSidebar(
headerPanel("Example plot"),
sidebarPanel(
sliderInput('mu', 'Guess at the mu',value = 70, min = 60, max = 80, step = 0.05,)
),
mainPanel(
plotOutput('newHist')
)
))
library(shiny)
install.packages("shiny")
library(shiny)
shinyUI(pageWithSidebar(
headerPanel("Example plot"),
sidebarPanel(
sliderInput('mu', 'Guess at the mu',value = 70, min = 60, max = 80, step = 0.05,)
),
mainPanel(
plotOutput('newHist')
)
))
library(UsingR)
install.packages("UsingR")
data(galton)
data(galton)
library(UsingR)
data(galton)
shinyServer(
function(input, output) {
output$myHist <- renderPlot({
hist(galton$child, xlab='child height', col='lightblue',main='Histogram')
mu <- input$mu
lines(c(mu, mu), c(0, 200),col="red",lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
})
}
)
deployApp()
setwd("~/GitHub/Coursera-Developing-Data-Products/Quiz1")
deployApp()
install_github('slidify','ramnathv')
library(devtools)
install_github('slidify','ramnathv')
install_github('slidifyLibraries','ramnathv')
library(slidify)
setwd("~/GitHub/Coursera-Developing-Data-Products/slidify")
author('test')
